#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <climits>
#include <queue>

using namespace std;

class Node;

/** class representing connection between to vertices **/
class Edge {
public:
int weight;
Node *Source;
Node *Dest;

  Edge(Node *Source, Node *Dest, const int &weight) {
    this->Source=Source;
    this->Dest=Dest;
    this->weight=weight;
  };

/** predefine the equality operator for ease in the algorithm **/
  Edge operator = (const Edge &Other) {
    Source=Other.Source;
    Dest=Other.Dest;
    weight=Other.weight;
    return *this;
  }
};

/** class representing a vertex in the graph **/
class Node {
public:
bool Visited;
vector<Edge> Children;

  Node()
  {
    Visited=false;
  }

  void addChild(const int &Length,Node *Child)
  {
    Children.push_back(Edge(this,Child,Length));
  }
};

/** class that compares two Edges(connections) in a graph **/
class MyComp {
public:
  MyComp() {}

  bool operator() (const Edge &first, const Edge &second) {
    return first.weight > second.weight;
  }
};

typedef priority_queue<Edge, vector<Edge>, MyComp> PQ;
PQ PriorityGraph; // Queue with Edges we want to use to get MST
Edge MinEdge(NULL, NULL, INT_MAX); // Unused edge with minimum weight

/** Sets CurNode to visited and adds all its Edges to the priority queue **/
void insertToPQ(Node *CurNode)
{
  CurNode->Visited=true;
  for(unsigned int i=0;i<CurNode->Children.size();i++)
  {
      if(CurNode->Children[i].Dest->Visited==false) {
        PriorityGraph.push(CurNode->Children[i]);
      }
  }
}

/** Gets the maximum weighted Edge from CurNode's children that is below Bound number **/
int getMaxBelow(Node *CurNode,const int &Bound)
{
  int maxBelow=-1;
  for(unsigned int i=0;i<CurNode->Children.size();i++)
  {
    if(CurNode->Children[i].weight<Bound)
    {
      maxBelow = max(maxBelow,CurNode->Children[i].weight);
    }
  }

  return maxBelow;
}

/**
* This function will compute the shortest paths to connect all vertices in a graph
* by the Prim's algorithm.
*/
int primAlgorithm()
{
  int CurSum=0;
  while(PriorityGraph.empty()==false)
  {
    Edge CurElement = PriorityGraph.top();

    PriorityGraph.pop();
    if(CurElement.Dest->Visited==true) {
      if(MinEdge.weight>CurElement.weight) {
        MinEdge=CurElement;
      }

      continue;
    }

    CurSum += CurElement.weight;
    insertToPQ(CurElement.Dest);
  }
  Node *Source = MinEdge.Source;
  Node *Dest = MinEdge.Dest;
  int weight = MinEdge.weight;

  int add  = weight;
      add -= max( getMaxBelow(Source, weight), getMaxBelow(Dest, weight) );

  return CurSum + add;
}

int main()
{
  int n, first, second, length;
  cin >> n;

  map<int,Node*> Graph;

  for(int i=0;i<n;i++)
  {
    cin >> first >> second >> length;
    if(Graph.count(first)==0)
    {
      Graph.insert(make_pair(first,new Node()));
    }
    if(Graph.count(second)==0)
    {
      Graph.insert(make_pair(second,new Node()));
    }

    Graph[first]->addChild(length,Graph[second]);
    Graph[second]->addChild(length,Graph[first]);
  }

  insertToPQ(Graph.begin()->second);
  cout << primAlgorithm() << endl;

  Graph.clear();

  return 0;
}
